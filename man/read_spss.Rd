% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_spss.R
\name{read_spss}
\alias{read_spss}
\title{Read SPSS (`.sav`, `.zsav`, `.por`) files. Write `.sav` and `.zsav` files.}
\usage{
read_spss(
  file,
  user_na = NULL,
  col_select = NULL,
  skip = NULL,
  n_max = NULL,
  .name_repair = "unique",
  id = NULL,
  filename = NULL,
  doi = NULL
)
}
\arguments{
\item{file}{Either a path to a file, a connection, or literal data
(either a single string or a raw vector).

Files ending in \code{.gz}, \code{.bz2}, \code{.xz}, or \code{.zip} will
be automatically uncompressed. Files starting with \code{http://},
\code{https://}, \code{ftp://}, or \code{ftps://} will be automatically
downloaded. Remote gz files can also be automatically downloaded and
decompressed.

Literal data is most useful for examples and tests. It must contain at
least one new line to be recognised as data (instead of a path) or be a
vector of greater than length 1.

Using a value of \code{\link[readr:clipboard]{clipboard()}} will read from the system clipboard.}

\item{user_na}{If \code{TRUE} variables with user defined missing will
be read into \code{\link[haven:labelled_spss]{labelled_spss()}} objects. If \code{FALSE}, the
default, user-defined missings will be converted to \code{NA}.}

\item{col_select}{One or more selection expressions, like in
\code{\link[dplyr:select]{dplyr::select()}}. Use \code{c()} or \code{list()} to use more than one expression.
See \code{?dplyr::select} for details on available selection options. Only the
specified columns will be read from \code{data_file}.}

\item{skip}{Number of lines to skip before reading data.}

\item{n_max}{Maximum number of lines to read.}

\item{.name_repair}{Treatment of problematic column names:
\itemize{
\item \code{"minimal"}: No name repair or checks, beyond basic existence,
\item \code{"unique"}: Make sure names are unique and not empty,
\item \code{"check_unique"}: (default value), no name repair, but check they are
\code{unique},
\item \code{"universal"}: Make the names \code{unique} and syntactic
\item a function: apply custom name repair (e.g., \code{.name_repair = make.names}
for names in the style of base R).
\item A purrr-style anonymous function, see \code{\link[rlang:as_function]{rlang::as_function()}}
}

This argument is passed on as \code{repair} to \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}}.
See there for more details on these terms and the strategies used
to enforce them.}

\item{id}{An import file name.}

\item{doi}{An optional document object identifier.}
}
\value{
A tibble, data frame variant with nice defaults.

  Variable labels are stored in the "label" attribute of each variable.
  It is not printed on the console, but the RStudio viewer will show it.

  `write_sav()` returns the input `data` invisibly.
}
\description{
`read_sav()` reads both `.sav` and `.zsav` files; `write_sav()` creates
`.zsav` files when `compress = TRUE`. `read_por()` reads `.por` files.
`read_spss()` uses either `read_por()` or `read_sav()` based on the
file extension.
}
\details{
Currently haven can read and write logical, integer, numeric, character
and factors. See [labelled_spss()] for how labelled variables in
SPSS are handled in R.

This is a wrapper around haven::read_spss
}
\examples{
path <- system.file("examples", "iris.sav", package = "haven")
read_sav(path)

tmp <- tempfile(fileext = ".sav")
write_sav(mtcars, tmp)
read_sav(tmp)
}
\concept{import functions}
